= irt

Ruby Interactive Testing - Use irb or rails console for testing.

== Usage

    irt [-n|--new] PATH [options] [rails_env]

    [-n|--new]    creates the new file at PATH
    PATH          path to a single file or dir (<dir>/**/*.irt files)
    [options]     all the options supported by irb or rails console
    [rails_env]   the optional rails environment to load (must be the last arg)

    >> irt_help

== Features

I like to test my code step by step with irb: it's like playing. But then, when everything
is working as I want, I know I have to write the tests for future changes, and... that's like working!
And it's also somehow silly, because you know that everything is ok because you tried it thoroughly,
but you have to re-write the same steps and pack everything into a test-suite. That's not DRY at all.
So I wrote IRT.

IRT records all the steps of your interactive testing with irb (or rails console), and can re-run
them when you need to check if everything is still ok after some change. That's DRY.

But IRT tries also to be smart: it ignores all the inspecting commands (p, pp, y, puts, inspect, ...)
which you might need to use to debug your code. It also ignores all the typos that generate errors,
and records a clean history that can be copied and pasted into the test file, mostly without the need
of any cleanup. And best of all, when a command is ignored its result is also ignored, so the last value
(_) does not change.

When you check the result of some critical step, you can add a test to the history by simply using
'add_test' and eventually add a description, and the testing code will be automatically generated and
added to the history.

When some test fails IRT shows you the tail of the running file, so you have an instant feedback.
It also opens an interactive session at that point with all the variables loaded, so you can imediately
and interactively find and fix what went wrong.

IRT can compare complex objects and shows the diffs. If you install the 'differ' gem, when a test
fails IRT will also show you a very readable yaml dump with the differences between the expected and
actual values, so you can immediately find even a little problem inside a very complex object.

== Mini Tutorial

    $ irt -n try.irt

creates the file 'try.irt' and opens the console

    >> irt_help

Shows the available IRT Commands and their descriptions.

Now play with the console, creating variables and stuffs and adding a test sometimes:

    >> add_test "this is a description for the test"

then type:

    >> h

to show the history, or if you played a lot type:

    >> h 0

Notice that the history does not record commands like p, pp, inspect, y, ...
Now copy the history lines and paste them into the try.irt file, save it and restart IRT with:

    >> r!

Edit the try.irt file, changing some value and rerun with r!. You will see the reports of your failed tests.

Now cd to the irt gem dir and try:

    $ irt examples/objects.irt

Remember to use 'x' or 'exit' to exit from any interactive session an keep running the rest of the file.

== Configuration

The default ~/.irtrc file contain the following:

    require 'rubygems'
    require 'irt'
    require 'irt/init'

If you want to add your preferred features, try to load your '~/.irbrc' file at the top: if it is not
playing well with IRT, then copy and paste just part of it.

You can also pass a few configuration variables in the ~/.irtrc file:

    IRT.color = true
    IRT.open_session_on_failure = true
    IRT.show_tail_on_open_session = true
    IRT.history.tail_size = 10
    IRT.history.ignored_commands << %w[any ignored command you want to add]

== Optionals

Install 'Differ' to have nice formatted failure report, showing the differences between the expected and
actual values.

=== Note about diff colors

The colors in the diff report might appear unusual: usually the + lines (insertions) are green,
while the - lines (deletions) are red. But traditionally "OK things" are green and "wrong things" are red,
and so are the tests in IRT. For this reason the green lines are what you would expect to be OK
(expected values) while the red lines are what is currently wrong (current values).
The problem is that in a failed test the lines that should be ok are gone and the wrong one are in their
place so the - are always green and the + are always red. Remember it when you see a change with a green
- line and a red + line: that means that the ok line has gone and the wrong line has come in its place.

== Upgrade

Upgrading from one version to another requires that you manually delete the ~/.irtrc file.

== Credit

IRT has been totally inspired by rubydoctest, although now it is focusing just on easy testing.

== Copyright

Copyright (c) 2010 Domizio Demichelis. See LICENSE for details.
