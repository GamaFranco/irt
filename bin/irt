#!/usr/bin/env ruby

require 'rubygems'
require 'irt'

puts "irt #{IRT::VERSION} (c) 2010 Domizio Demichelis"

banner = %(
Usage:
    irt PATH [options] [rails_env]

Description:
    Ruby Interactive Testing - Use irb or rails console for testing.

    IRT deals with regular ruby files suffixed with '.irt', containing
    built-in or user definable directives embedded in comments.
    When fired from a rails root it uses the rails console.

    PATH          path to a single file or dir (<dir>/**/*.irt files)
    [options]     all the options supported by irb or rails console
    [rails_env]   the optional rails environment to load (must be the last arg)

Example:
    $ cat -n try.irt
     1  # next comment contains the 'desc' or '"' directive
     2  #: desc Testing sum
     3  a = 5
     4  b = 6
     5  a + b
     6  # next comment contains the 'test' or '=>' directive
     7  #: => 11
     8
     9  #:" Will fail
    10  b
    11  #: => 100

    $ irt try.irt
    === Running file try.irt ===
      1. OK! Testing sum
      2. FAILED! Will fail
         > expected: 100
         < got: 6
         from try.irt:11
    2 tests: 1 passed, 1 failed.

)

if ARGV.empty? || ARGV.first =~ /^(-h|--help)$/
  puts banner
  exit
end

if ARGV.first =~ /^(-v|--version)$/
  puts IRT::VERSION
  exit
end

path = ARGV.shift
files = File.directory?(path) ? Dir.glob(File.join(path, '**/*.irt')): [path]
if files.empty?
  puts "No *.irt file to run in #{path}"
  exit
end

irtrc = File.join ENV['HOME'], '.irtrc'
File.open(irtrc, 'w') do |f|
  f.puts "require 'rubygems'\nrequire 'irt'"
end unless File.exists?(irtrc)

command = 'irb'
if File.exists?('./config/environment.rb')
  if File.exists?('./script/rails')
    command =  'rails c'
  elsif File.exists?('./script/console')
    command = 'ruby script/console'
  end
  ARGV << 'development' if command != 'irb' && ARGV.last =~ /^-/
end

files.each do |file|
  puts "=== Running file #{file} ==="
  system "env IRBRC=#{irtrc} #{command} #{file} #{ARGV * ' '}"
end
